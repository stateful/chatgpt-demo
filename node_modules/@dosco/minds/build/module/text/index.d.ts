export * from './memory';
export * from './generate';
export type GenerateResponse = {
    id: string;
    sessionID?: string;
    query: string;
    values: {
        id: string;
        text: string;
    }[];
    value(): string | Map<string, string[]>;
};
export type AIGenerateResponse = GenerateResponse & {
    value(): string;
};
export type EmbedResponse = {
    id: string;
    sessionID?: string;
    texts: string[];
    model: string;
    embeddings: number[];
};
export type AudioResponse = {
    duration: number;
    segments: {
        id: number;
        start: number;
        end: number;
        text: string;
    }[];
};
export interface AIMemory {
    add(text: string, sessionID?: string): void;
    history(sessionID?: string): string;
    peek(sessionID?: string): Readonly<string[]>;
}
export type Embeddings = {
    model: string;
    embeddings: number[];
};
export type PromptAction = {
    readonly name: string;
    readonly description: string;
    action(text: string, embeds?: Embeddings): string;
};
export type PromptMetadata = {
    stopSequences: string[];
    queryPrefix?: string;
    responsePrefix?: string;
    actions?: PromptAction[];
    actionName?: RegExp;
    actionValue?: RegExp;
    finalValue?: RegExp;
    keyValueResponse?: boolean;
};
export interface AIPrompt {
    metadata(): Readonly<PromptMetadata>;
    create(query: string, history: () => string, ai: AIService): string;
}
export interface AIService {
    name(): string;
    generate(prompt: string, md?: Readonly<PromptMetadata>, sessionID?: string): Promise<AIGenerateResponse>;
    embed(texts: string[], sessionID?: string): Promise<EmbedResponse>;
}
