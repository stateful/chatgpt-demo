import { apiCall, apiCallWithUpload } from './util';
const apiURL = 'https://api.openai.com/v1/';
var apiType;
(function (apiType) {
    apiType["Generate"] = "completions";
    apiType["ChatGenerate"] = "chat/completions";
    apiType["Embed"] = "embeddings";
    apiType["Transcribe"] = "audio/transcriptions";
})(apiType || (apiType = {}));
/**
 * OpenAI: Models for text generation
 * @export
 */
export var OpenAIGenerateModel;
(function (OpenAIGenerateModel) {
    OpenAIGenerateModel["GPT4"] = "gpt-4";
    OpenAIGenerateModel["GPT432K"] = "gpt-4-32k";
    OpenAIGenerateModel["GPT3Turbo"] = "gpt-3.5-turbo";
    OpenAIGenerateModel["GPT3TextDavinci003"] = "text-davinci-003";
})(OpenAIGenerateModel || (OpenAIGenerateModel = {}));
/**
 * OpenAI: Models for code generation
 * @export
 */
export var OpenAIGenerateCodeModel;
(function (OpenAIGenerateCodeModel) {
    OpenAIGenerateCodeModel["CodexCodeDavinci002"] = "code-davinci-002";
    OpenAIGenerateCodeModel["CodexCodeCushman001"] = "code-cushman-001";
    OpenAIGenerateCodeModel["CodexCodeDavinci001"] = "code-davinci-001";
})(OpenAIGenerateCodeModel || (OpenAIGenerateCodeModel = {}));
/**
 * OpenAI: Models for use in embeddings
 * @export
 */
export var OpenAIEmbedModels;
(function (OpenAIEmbedModels) {
    OpenAIEmbedModels["GPT3TextEmbeddingAda002"] = "text-embedding-ada-002";
    OpenAIEmbedModels["GPT3TextSimilarityDavinci001"] = "text-similarity-davinci-001";
})(OpenAIEmbedModels || (OpenAIEmbedModels = {}));
/**
 * OpenAI: Models for for audio transcription
 * @export
 */
export var OpenAIAudioModel;
(function (OpenAIAudioModel) {
    OpenAIAudioModel["Whisper1"] = "whisper-1";
})(OpenAIAudioModel || (OpenAIAudioModel = {}));
/**
 * OpenAI: Default Model options for text generation
 * @export
 */
export const OpenAIDefaultOptions = () => ({
    model: OpenAIGenerateModel.GPT3Turbo,
    embedModel: OpenAIEmbedModels.GPT3TextEmbeddingAda002,
    audioModel: OpenAIAudioModel.Whisper1,
    suffix: null,
    maxTokens: 300,
    temperature: 0.45,
    topP: 1,
});
/**
 * OpenAI: Default model options for more creative text generation
 * @export
 */
export const OpenAICreativeOptions = () => ({
    ...OpenAIDefaultOptions(),
    model: OpenAIGenerateModel.GPT3Turbo,
    temperature: 0.9,
});
/**
 * OpenAI: Default model options for more fast text generation
 * @export
 */
export const OpenAIFastOptions = () => ({
    ...OpenAIDefaultOptions(),
    model: OpenAIGenerateModel.GPT3Turbo,
    temperature: 0.45,
});
const generateReq = (prompt, opt, stopSequences) => {
    if (stopSequences?.length > 4) {
        throw new Error('OpenAI supports prompts with max 4 items in stopSequences');
    }
    return {
        model: opt.model,
        prompt: prompt,
        suffix: opt.suffix,
        max_tokens: opt.maxTokens,
        temperature: opt.temperature,
        top_p: opt.topP,
        n: opt.n,
        stream: opt.stream,
        logprobs: opt.logprobs,
        echo: opt.echo,
        stop: stopSequences,
        presence_penalty: opt.presencePenalty,
        frequency_penalty: opt.frequencyPenalty,
        best_of: opt.bestOf,
        logit_bias: opt.logitBias,
        user: opt.user,
    };
};
const generateChatReq = (prompt, opt, stopSequences) => {
    if (stopSequences?.length > 4) {
        throw new Error('OpenAI supports prompts with max 4 items in stopSequences');
    }
    return {
        model: opt.model,
        messages: [{ role: 'user', content: prompt }],
        max_tokens: opt.maxTokens,
        temperature: opt.temperature,
        top_p: opt.topP,
        n: opt.n,
        stream: opt.stream,
        stop: stopSequences,
        presence_penalty: opt.presencePenalty,
        frequency_penalty: opt.frequencyPenalty,
        logit_bias: opt.logitBias,
        user: opt.user,
    };
};
const generateAudioReq = (opt, prompt, language) => {
    return {
        model: opt.audioModel,
        prompt: prompt,
        temperature: opt.temperature,
        language: language,
        response_format: 'verbose_json',
    };
};
/**
 * OpenAI: AI Service
 * @export
 */
export class OpenAI {
    apiKey;
    orgID;
    options;
    constructor(apiKey, options = OpenAIDefaultOptions()) {
        if (apiKey === '') {
            throw new Error('OpenAPI API key not set');
        }
        this.apiKey = apiKey;
        this.options = options;
    }
    name() {
        return 'OpenAI';
    }
    generate(prompt, md, sessionID) {
        prompt = prompt.trim();
        if ([OpenAIGenerateModel.GPT3Turbo, OpenAIGenerateModel.GPT4].includes(this.options.model)) {
            return this.generateChat(prompt, md, sessionID);
        }
        else {
            return this.generateDefault(prompt, md, sessionID);
        }
    }
    generateDefault(prompt, md, sessionID) {
        const res = apiCall(this.createAPI(apiType.Generate), generateReq(prompt, this.options, md?.stopSequences));
        return res.then(({ id, choices: c }) => ({
            id: id.toString(),
            sessionID: sessionID,
            query: prompt,
            values: c.map((v) => ({ id: v.index.toString(), text: v.text })),
            value() {
                return this.values[0].text;
            },
        }));
    }
    generateChat(prompt, md, sessionID) {
        const res = apiCall(this.createAPI(apiType.ChatGenerate), generateChatReq(prompt, this.options, md?.stopSequences));
        return res.then(({ id, choices: c }) => ({
            id: id.toString(),
            sessionID: sessionID,
            query: prompt,
            values: c.map((v) => ({
                id: v.index.toString(),
                text: v.message.content,
            })),
            value() {
                return this.values[0].text;
            },
        }));
    }
    embed(texts, sessionID) {
        if (texts.length > 96) {
            throw new Error('OpenAI limits embeddings input to 96 strings');
        }
        const overLimit = texts.filter((v) => v.length > 512);
        if (overLimit.length !== 0) {
            throw new Error('OpenAI limits embeddings input to 512 characters');
        }
        const embedReq = { input: texts, model: this.options.embedModel };
        const res = apiCall(this.createAPI(apiType.Embed), embedReq);
        return res.then((data) => ({
            id: '',
            sessionID,
            texts,
            model: data.model,
            embeddings: data.data.embeddings,
        }));
    }
    transcribe(file, prompt, language, sessionID) {
        const res = apiCallWithUpload(this.createAPI(apiType.Transcribe), generateAudioReq(this.options, prompt, language), file);
        return res.then((data) => ({
            duration: data.duration,
            segments: data.segments.map((v) => ({
                id: v.id,
                start: v.start,
                end: v.end,
                text: v.text,
            })),
            sessionID,
        }));
    }
    createAPI(name) {
        return {
            url: apiURL,
            key: this.apiKey,
            name,
            headers: {
                ...(this.orgID ? { 'OpenAI-Organization': this.orgID } : null),
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,