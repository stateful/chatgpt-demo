import { apiCall } from './util';
const apiURL = 'https://api.cohere.ai/';
/**
 * Cohere: Models for text generation
 * @export
 */
export var CohereGenerateModel;
(function (CohereGenerateModel) {
    CohereGenerateModel["CommandXLargeNightly"] = "command-xlarge-nightly";
    CohereGenerateModel["XLarge"] = "xlarge";
    CohereGenerateModel["Medium"] = "medium";
})(CohereGenerateModel || (CohereGenerateModel = {}));
/**
 * Cohere: Specify how and if the token likelihoods are returned with the response.
 * @export
 */
export var CohereReturnLikelihoods;
(function (CohereReturnLikelihoods) {
    CohereReturnLikelihoods["GENERATION"] = "GENERATION";
    CohereReturnLikelihoods["ALL"] = "ALL";
    CohereReturnLikelihoods["NONE"] = "NONE";
})(CohereReturnLikelihoods || (CohereReturnLikelihoods = {}));
/**
 * Cohere: Default Model options for text generation
 * @export
 */
export const CohereDefaultOptions = () => ({
    model: CohereGenerateModel.CommandXLargeNightly,
    maxTokens: 300,
    temperature: 0.45,
    topK: 0,
    topP: 1,
    frequencyPenalty: 0,
    presencePenalty: 0,
});
/**
 * Cohere: Default model options for more creative text generation
 * @export
 */
export const CohereCreativeOptions = () => ({
    ...CohereDefaultOptions(),
    temperature: 0.9,
});
const generateReq = (prompt, opt, stopSequences) => ({
    prompt: prompt,
    model: opt.model,
    max_tokens: opt.maxTokens,
    temperature: opt.temperature,
    k: opt.topK,
    p: opt.topP,
    frequency_penalty: opt.frequencyPenalty,
    presence_penalty: opt.presencePenalty,
    end_sequences: stopSequences,
    stop_sequences: opt.stopSequences,
    return_likelihoods: opt.returnLikelihoods,
});
/**
 * Cohere: AI Service
 * @export
 */
export class Cohere {
    apiKey;
    options;
    constructor(apiKey, options = CohereDefaultOptions()) {
        if (apiKey === '') {
            throw new Error('Cohere API key not set');
        }
        this.apiKey = apiKey;
        this.options = options;
    }
    name() {
        return 'Cohere';
    }
    generate(prompt, md, sessionID) {
        prompt = prompt.trim();
        const res = apiCall({
            key: this.apiKey,
            name: "generate" /* apiTypes.Generate */,
            url: apiURL,
            headers: { 'Cohere-Version': '2022-12-06' },
        }, generateReq(prompt, this.options, md?.stopSequences));
        return res.then(({ id, generations: gens }) => ({
            id: id,
            sessionID: sessionID,
            query: prompt,
            values: gens,
            value() {
                return this.values[0].text;
            },
        }));
    }
    embed(texts, sessionID) {
        if (texts.length > 96) {
            throw new Error('Cohere limits embeddings input to 96 strings');
        }
        const overLimit = texts.filter((v) => v.length > 512);
        if (overLimit.length !== 0) {
            throw new Error('Cohere limits embeddings input to 512 characters');
        }
        const res = apiCall({
            key: this.apiKey,
            name: "embed" /* apiTypes.Embed */,
            url: apiURL,
            headers: { 'Cohere-Version': '2022-12-06' },
        }, { texts, model: this.options.model, truncate: 'NONE' });
        return res.then(({ id, embeddings }) => ({
            id: id,
            sessionID,
            texts,
            model: this.options.model,
            embeddings,
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29oZXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FpL2NvaGVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQU8sT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBTXRDLE1BQU0sTUFBTSxHQUFHLHdCQUF3QixDQUFDO0FBT3hDOzs7R0FHRztBQUNILE1BQU0sQ0FBTixJQUFZLG1CQUlYO0FBSkQsV0FBWSxtQkFBbUI7SUFDN0Isc0VBQStDLENBQUE7SUFDL0Msd0NBQWlCLENBQUE7SUFDakIsd0NBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQUpXLG1CQUFtQixLQUFuQixtQkFBbUIsUUFJOUI7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLENBQU4sSUFBWSx1QkFJWDtBQUpELFdBQVksdUJBQXVCO0lBQ2pDLG9EQUF5QixDQUFBO0lBQ3pCLHNDQUFXLENBQUE7SUFDWCx3Q0FBYSxDQUFBO0FBQ2YsQ0FBQyxFQUpXLHVCQUF1QixLQUF2Qix1QkFBdUIsUUFJbEM7QUFrQkQ7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsR0FBa0IsRUFBRSxDQUFDLENBQUM7SUFDeEQsS0FBSyxFQUFFLG1CQUFtQixDQUFDLG9CQUFvQjtJQUMvQyxTQUFTLEVBQUUsR0FBRztJQUNkLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLElBQUksRUFBRSxDQUFDO0lBQ1AsSUFBSSxFQUFFLENBQUM7SUFDUCxnQkFBZ0IsRUFBRSxDQUFDO0lBQ25CLGVBQWUsRUFBRSxDQUFDO0NBQ25CLENBQUMsQ0FBQztBQUVIOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLEdBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELEdBQUcsb0JBQW9CLEVBQUU7SUFDekIsV0FBVyxFQUFFLEdBQUc7Q0FDakIsQ0FBQyxDQUFDO0FBbUNILE1BQU0sV0FBVyxHQUFHLENBQ2xCLE1BQWMsRUFDZCxHQUE0QixFQUM1Qixh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