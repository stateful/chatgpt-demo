import { apiCall } from './util';
const apiURL = 'https://api.aleph-alpha.com/';
/**
 * AlephAlpha: Models for text generation
 * @export
 */
export var AlephAlphaGenerateModel;
(function (AlephAlphaGenerateModel) {
    AlephAlphaGenerateModel["LuminousSupremeControl"] = "luminous-supreme-control";
    AlephAlphaGenerateModel["LuminousSupreme"] = "luminous-supreme";
    AlephAlphaGenerateModel["LuminousExtended"] = "luminous-extended";
    AlephAlphaGenerateModel["LuminousBase"] = "luminous-base";
})(AlephAlphaGenerateModel || (AlephAlphaGenerateModel = {}));
export var AlephAlphaEmbedRepresentation;
(function (AlephAlphaEmbedRepresentation) {
    AlephAlphaEmbedRepresentation["Symmetric"] = "symmetric";
    AlephAlphaEmbedRepresentation["Document"] = "document";
    AlephAlphaEmbedRepresentation["Query"] = "query";
})(AlephAlphaEmbedRepresentation || (AlephAlphaEmbedRepresentation = {}));
export var AlephaAlphaGenerateHosting;
(function (AlephaAlphaGenerateHosting) {
    AlephaAlphaGenerateHosting["MaxPrivacy"] = "aleph-alpha";
})(AlephaAlphaGenerateHosting || (AlephaAlphaGenerateHosting = {}));
/**
 * AlephAlpha: Default Model options for text generation
 * @export
 */
export const AlephAlphaDefaultOptions = () => ({
    model: AlephAlphaGenerateModel.LuminousSupreme,
    representation: AlephAlphaEmbedRepresentation.Document,
    disableOptimizations: true,
    maxTokens: 300,
    temperature: 0.45,
    topK: 0,
    topP: 1,
    //frequencyPenalty: 0.40
    // presencePenalty: 0.40
});
/**
 * AlephAlpha: Default model options for more creative text generation
 * @export
 */
export const AlephAlphaCreativeOptions = () => ({
    ...AlephAlphaDefaultOptions(),
    model: AlephAlphaGenerateModel.LuminousSupreme,
    temperature: 0.9,
});
const generateReq = (prompt, opt, stopSequences) => ({
    model: opt.model,
    hosting: opt.hosting,
    prompt: prompt,
    maximum_tokens: opt.maxTokens,
    minimum_tokens: opt.minTokens,
    echo: opt.echo,
    temperature: opt.temperature,
    top_k: opt.topK,
    top_p: opt.topP,
    presence_penalty: opt.presencePenalty,
    frequency_penalty: opt.frequencyPenalty,
    sequence_penalty: opt.sequencePenalty,
    sequence_penalty_min_length: opt.sequencePenaltyMinLength,
    repetition_penalties_include_completion: opt.repetitionPenaltiesIncludeCompletion,
    use_multiplicative_presence_penalty: opt.useMultiplicativePresencePenalty,
    useMultiplicativeFrequencyPenalty: opt.useMultiplicativeFrequencyPenalty,
    useMultiplicativeSequencePenalty: opt.useMultiplicativeSequencePenalty,
    penalty_bias: opt.penaltyBias,
    penalty_exceptions: opt.penaltyExceptions,
    penalty_exceptions_include_stop_sequences: opt.penaltyExceptionsIncludeStopSequences,
    best_of: opt.bestOf,
    n: opt.n,
    logit_bias: opt.logitBias,
    log_probs: opt.logProbs,
    stop_sequences: stopSequences,
    tokens: opt.tokens,
    raw_completion: opt.rawCompletion,
    disable_optimizations: opt.disableOptimizations,
    completion_bias_inclusion: opt.completionBiasInclusion,
    completion_bias_inclusion_first_token_only: opt.completionBiasInclusionFirstTokenOnly,
    completion_bias_exclusion: opt.completionBiasExclusion,
    completion_bias_exclusion_first_token_only: opt.completionBiasExclusionFirstTokenOnly,
    contextual_control_threshold: opt.contextualControlThreshold,
    control_log_additive: opt.controlLogAdditive,
});
const embedReq = (prompt, opt) => ({
    model: opt.model,
    hosting: opt.hosting,
    prompt: prompt,
    representation: opt.representation,
    compress_to_size: opt.compressToSize,
    normalize: opt.normalize,
    contextual_control_threshold: opt.contextualControlThreshold,
    control_log_additive: opt.controlLogAdditive,
});
/**
 * AlephAlpha: AI Service
 * @export
 */
export class AlephAlpha {
    apiKey;
    options;
    constructor(apiKey, options = AlephAlphaDefaultOptions()) {
        if (apiKey === '') {
            throw new Error('AlephAlpha API key not set');
        }
        this.apiKey = apiKey;
        this.options = options;
    }
    name() {
        return 'AlephAlpha';
    }
    generate(prompt, md, sessionID) {
        const text = prompt.trim();
        const res = apiCall({
            key: this.apiKey,
            name: "complete" /* apiTypes.Generate */,
            url: apiURL,
        }, generateReq(text, this.options, md?.stopSequences));
        return res.then(({ completions }) => ({
            id: '',
            sessionID: sessionID,
            query: prompt,
            values: completions.map((v) => ({ id: '', text: v.completion.trim() })),
            value() {
                return this.values[0].text;
            },
        }));
    }
    embed(texts, sessionID) {
        if (texts.length > 1) {
            throw new Error('AlephAlpha limits embeddings input to 1 string');
        }
        const overLimit = texts.filter((v) => v.length > 512);
        if (overLimit.length !== 0) {
            throw new Error('AlephAlpha limits embeddings input to 512 characters');
        }
        const res = apiCall({
            key: this.apiKey,
            name: "semantic_embed" /* apiTypes.Embed */,
            url: apiURL,
        }, embedReq(texts[0], this.options));
        return res.then(({ model_version, embedding }) => ({
            id: '',
            sessionID,
            texts,
            model: model_version,
            embeddings: embedding,
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcGhhbHBoYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9haS9hbGVwaGFscGhhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFBTyxPQUFPLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFdEMsTUFBTSxNQUFNLEdBQUcsOEJBQThCLENBQUM7QUFPOUM7OztHQUdHO0FBQ0gsTUFBTSxDQUFOLElBQVksdUJBS1g7QUFMRCxXQUFZLHVCQUF1QjtJQUNqQyw4RUFBbUQsQ0FBQTtJQUNuRCwrREFBb0MsQ0FBQTtJQUNwQyxpRUFBc0MsQ0FBQTtJQUN0Qyx5REFBOEIsQ0FBQTtBQUNoQyxDQUFDLEVBTFcsdUJBQXVCLEtBQXZCLHVCQUF1QixRQUtsQztBQUVELE1BQU0sQ0FBTixJQUFZLDZCQUlYO0FBSkQsV0FBWSw2QkFBNkI7SUFDdkMsd0RBQXVCLENBQUE7SUFDdkIsc0RBQXFCLENBQUE7SUFDckIsZ0RBQWUsQ0FBQTtBQUNqQixDQUFDLEVBSlcsNkJBQTZCLEtBQTdCLDZCQUE2QixRQUl4QztBQUVELE1BQU0sQ0FBTixJQUFZLDBCQUVYO0FBRkQsV0FBWSwwQkFBMEI7SUFDcEMsd0RBQTBCLENBQUE7QUFDNUIsQ0FBQyxFQUZXLDBCQUEwQixLQUExQiwwQkFBMEIsUUFFckM7QUE0Q0Q7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsR0FBc0IsRUFBRSxDQUFDLENBQUM7SUFDaEUsS0FBSyxFQUFFLHVCQUF1QixDQUFDLGVBQWU7SUFDOUMsY0FBYyxFQUFFLDZCQUE2QixDQUFDLFFBQVE7SUFDdEQsb0JBQW9CLEVBQUUsSUFBSTtJQUMxQixTQUFTLEVBQUUsR0FBRztJQUNkLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLElBQUksRUFBRSxDQUFDO0lBQ1AsSUFBSSxFQUFFLENBQUM7SUFDUCx3QkFBd0I7SUFDeEIsd0JBQXdCO0NBQ3pCLENBQUMsQ0FBQztBQUVIOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEdBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLEdBQUcsd0JBQXdCLEVBQUU7SUFDN0IsS0FBSyxFQUFFLHVCQUF1QixDQUFDLGVBQWU7SUFDOUMsV0FBVyxFQUFFLEdBQUc7Q0FDakIsQ0FBQyxDQUFDO0FBcUVILE1BQU0sV0FBVyxHQUFHLENBQ2xCLE1BQWMsRUFDZCxHQUFnQyxFQUNoQyxhQUF1QixFQUNJLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztJQUNoQixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87SUFDcEIsTUFBTSxFQUFFLE1BQU07SUFDZCxjQUFjLEVBQUUsR0FBRyxDQUFDLFNBQVM7SUFDN0IsY0FBYyxFQUFFLEdBQUcsQ0FBQyxTQUFTO0lBQzdCLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtJQUNkLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVztJQUM1QixLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUk7SUFDZixLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUk7SUFDZixnQkFBZ0IsRUFBRSxHQUFHLENBQUMsZUFBZTtJQUNyQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsZ0JBQWdCO0lBQ3ZDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxlQUFlO0lBQ3JDLDJCQUEyQixFQUFFLEdBQUcsQ0FBQyx3QkFBd0I7SUFDekQsdUNBQXVDLEVBQ3JDLEdBQUcsQ0FBQyxvQ0FBb0M7SUFDMUMsbUNBQW1DLEVBQUUsR0FBRyxDQUFDLGdDQUFnQztJQUN6RSxpQ0FBaUMsRUFBRSxHQUFHLENBQUMsaUNBQWlDO0lBQ3hFLGdDQUFnQyxFQUFFLEdBQUcsQ0FBQyxnQ0FBZ0M7SUFDdEUsWUFBWSxFQUFFLEdBQUcsQ0FBQyxXQUFXO0lBQzdCLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxpQkFBaUI7SUFDekMseUNBQXlDLEVBQ3ZDLEdBQUcsQ0FBQyxxQ0FBcUM7SUFDM0MsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNO0lBQ25CLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNSLFVBQVUsRUFBRSxHQUFHLENBQUMsU0FBUztJQUN6QixTQUFTLEVBQUUsR0FBRyxDQUFDLFFBQVE7SUFDdkIsY0FBYyxFQUFFLGFBQWE7SUFDN0IsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO0lBQ2xCLGNBQWMsRUFBRSxHQUFHLENBQUMsYUFBYTtJQUNqQyxxQkFBcUIsRUFBRSxHQUFHLENBQUMsb0JBQW9CO0lBQy9DLHlCQUF5QixFQUFFLEdBQUcsQ0FBQyx1QkFBdUI7SUFDdEQsMENBQTBDLEVBQ3hDLEdBQUcsQ0FBQyxxQ0FBcUM7SUFDM0MseUJBQXlCLEVBQUUsR0FBRyxDQUFDLHVCQUF1QjtJQUN0RCwwQ0FBMEMsRUFDeEMsR0FBRyxDQUFDLHFDQUFxQztJQUMzQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsMEJBQTBCO0lBQzVELG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxrQkFBa0I7Q0FDN0MsQ0FBQyxDQUFDO0FBRUgsTUFBTSxRQUFRLEdBQUcsQ0FDZixNQUFjLEVBQ2QsR0FBZ0MsRUFDUixFQUFFLENBQUMsQ0FBQztJQUM1QixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7SUFDaEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO0lBQ3BCLE1BQU0sRUFBRSxNQUFNO0lBQ2QsY0FBYyxFQUFFLEdBQUcsQ0FBQyxjQUFjO0lBQ2xDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxjQUFjO0lBQ3BDLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUztJQUN4Qiw0QkFBNEIsRUFBRSxHQUFHLENBQUMsMEJBQTBCO0lBQzVELG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxrQkFBa0I7Q0FDN0MsQ0FBQyxDQUFDO0FBRUg7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFVBQVU7SUFDYixNQUFNLENBQVM7SUFDZixPQUFPLENBQW9CO0lBRW5DLFlBQ0UsTUFBYyxFQUNkLFVBQXVDLHdCQUF3QixFQUFFO1FBRWpFLElBQUksTUFBTSxLQUFLLEVBQUUsRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSTtRQUNGLE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxRQUFRLENBQ04sTUFBYyxFQUNkLEVBQW1CLEVBQ25CLFNBQWtCO1FBRWxCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUUzQixNQUFNLEdBQUcsR0FBRyxPQUFPLENBS2pCO1lBQ0UsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2hCLElBQUksb0NBQW1CO1lBQ3ZCLEdBQUcsRUFBRSxNQUFNO1NBQ1osRUFDRCxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUNuRCxDQUFDO1FBRUYsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNwQyxFQUFFLEVBQUUsRUFBRTtZQUNOLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLEtBQUssRUFBRSxNQUFNO1lBQ2IsTUFBTSxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2RSxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDN0IsQ0FBQztTQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFlLEVBQUUsU0FBa0I7UUFDdkMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7U0FDbkU7UUFFRCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3RELElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUNqQjtZQUNFLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNoQixJQUFJLHVDQUFnQjtZQUNwQixHQUFHLEVBQUUsTUFBTTtTQUNaLEVBQ0QsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQ2pDLENBQUM7UUFFRixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqRCxFQUFFLEVBQUUsRUFBRTtZQUNOLFNBQVM7WUFDVCxLQUFLO1lBQ0wsS0FBSyxFQUFFLGFBQWE7WUFDcEIsVUFBVSxFQUFFLFNBQVM7U0FDdEIsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0NBQ0YifQ==