const promptHeader = (actions, context) => {
    const actn = actions.map((v) => v.name).join(', ');
    const actd = actions.map((v) => `${v.name}: ${v.description}`).join('\n');
    return `
Answer the following question using the actions below. Think step-by-step.

Actions:
${actd}

Format:
Question: The input question you must answer.
Thought: Always consider what to do.
Action: The action to take, choose from [${actn}].
Action Input: The input required for the action.
Observation: The output of the action.

Thought: I now have additional information.
Repeat the previous four steps as necessary.

Thought: I have the final answer
Final Answer: The answer to the original question.

${context ? `\nContext:"""\n${context}\n"""` : ''}

Start!`;
};
/**
 * A prompt used for question answering
 *
 * - This prompt is based off the famous RaAct paper.
 * - https://42papers.com/p/react-synergizing-reasoning-and-acting-in-language-models
 * @export
 */
export class QuestionAnswerPrompt {
    context;
    _metadata = {
        stopSequences: ['Question:', 'Observation:'],
        queryPrefix: '\nObservation: ',
        responsePrefix: '\nThought: ',
        actionName: /^Action:\s{0,}\n?(.+)$/m,
        actionValue: /^Action Input:\s{0,}\n?(.+)$/m,
        finalValue: /^Final Answer:((.|\n)*)/m,
    };
    constructor(actions = [], context) {
        this._metadata.actions = [...actions];
        this.context = context;
    }
    metadata() {
        return this._metadata;
    }
    create(query, history, _ai) {
        const { actions } = this._metadata;
        return `
${promptHeader(actions, this.context)}

Question: ${query}
${history()}
${this._metadata.responsePrefix}
`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5zd2Vycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9tcHRzL2Fuc3dlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxZQUFZLEdBQUcsQ0FBQyxPQUF1QixFQUFFLE9BQWdCLEVBQUUsRUFBRTtJQUNqRSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFMUUsT0FBTzs7OztFQUlQLElBQUk7Ozs7OzJDQUtxQyxJQUFJOzs7Ozs7Ozs7O0VBVTdDLE9BQU8sQ0FBQyxDQUFDLENBQUMsa0JBQWtCLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFOztPQUUxQyxDQUFDO0FBQ1IsQ0FBQyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFPLG9CQUFvQjtJQUN2QixPQUFPLENBQVU7SUFFakIsU0FBUyxHQUFtQjtRQUNsQyxhQUFhLEVBQUUsQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDO1FBQzVDLFdBQVcsRUFBRSxpQkFBaUI7UUFDOUIsY0FBYyxFQUFFLGFBQWE7UUFFN0IsVUFBVSxFQUFFLHlCQUF5QjtRQUNyQyxXQUFXLEVBQUUsK0JBQStCO1FBQzVDLFVBQVUsRUFBRSwwQkFBMEI7S0FDdkMsQ0FBQztJQUVGLFlBQVksVUFBMEIsRUFBRSxFQUFFLE9BQWdCO1FBQ3hELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWEsRUFBRSxPQUFxQixFQUFFLEdBQWM7UUFDekQsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDbkMsT0FBTztFQUNULFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7WUFFekIsS0FBSztFQUNmLE9BQU8sRUFBRTtFQUNULElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYztDQUM5QixDQUFDO0lBQ0EsQ0FBQztDQUNGIn0=