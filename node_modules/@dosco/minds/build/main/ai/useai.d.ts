export type GenerateResponse = {
    id: string;
    query: string;
    value: string;
    values: {
        id: string;
        text: string;
    }[];
};
export interface AIMemory {
    add(text: string): void;
    history(): string;
    peek(): Readonly<string[]>;
}
export type PromptAction = {
    readonly name: string;
    readonly description: string;
    action(text: string): string;
};
export type PromptMetadata = {
    readonly stopSequences: string[];
    readonly queryPrefix?: string;
    readonly responsePrefix?: string;
    readonly actionName?: RegExp;
    readonly actionValue?: RegExp;
    readonly finalValue?: RegExp;
};
export interface AIPrompt {
    metadata(): Readonly<PromptMetadata>;
    actions?(): ReadonlyArray<PromptAction>;
    create(ai: AIService, mem: AIMemory, query: string): string;
}
export interface AIService {
    name(): string;
    generate(prompt: string, md?: PromptMetadata): Promise<GenerateResponse>;
}
export declare class GenerateText {
    private ai;
    private mem;
    private prompt;
    private actmap;
    private maxSteps;
    private debug;
    constructor(ai: AIService, mem: AIMemory, prompt: AIPrompt);
    setMaxSteps(n: number): void;
    setDebug(b: boolean): void;
    generate(query: string): Promise<GenerateResponse>;
    private _generate;
    private callAI;
    private processSeq;
    private processAction;
}
