"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cohere = exports.CohereCreativeOptions = exports.CohereDefaultOptions = exports.CohereReturnLikelihoods = exports.CohereGenerateModel = void 0;
const util_1 = require("./util");
const apiURL = 'https://api.cohere.ai/';
/**
 * Cohere: Models for text generation
 * @export
 */
var CohereGenerateModel;
(function (CohereGenerateModel) {
    CohereGenerateModel["CommandXLargeNightly"] = "command-xlarge-nightly";
    CohereGenerateModel["XLarge"] = "xlarge";
    CohereGenerateModel["Medium"] = "medium";
})(CohereGenerateModel = exports.CohereGenerateModel || (exports.CohereGenerateModel = {}));
/**
 * Cohere: Specify how and if the token likelihoods are returned with the response.
 * @export
 */
var CohereReturnLikelihoods;
(function (CohereReturnLikelihoods) {
    CohereReturnLikelihoods["GENERATION"] = "GENERATION";
    CohereReturnLikelihoods["ALL"] = "ALL";
    CohereReturnLikelihoods["NONE"] = "NONE";
})(CohereReturnLikelihoods = exports.CohereReturnLikelihoods || (exports.CohereReturnLikelihoods = {}));
/**
 * Cohere: Default Model options for text generation
 * @export
 */
const CohereDefaultOptions = () => ({
    model: CohereGenerateModel.CommandXLargeNightly,
    maxTokens: 300,
    temperature: 0.45,
    topK: 0,
    topP: 1,
    frequencyPenalty: 0,
    presencePenalty: 0,
});
exports.CohereDefaultOptions = CohereDefaultOptions;
/**
 * Cohere: Default model options for more creative text generation
 * @export
 */
const CohereCreativeOptions = () => (Object.assign(Object.assign({}, (0, exports.CohereDefaultOptions)()), { temperature: 0.9 }));
exports.CohereCreativeOptions = CohereCreativeOptions;
const generateReq = (prompt, opt, stopSequences) => ({
    prompt: prompt,
    model: opt.model,
    max_tokens: opt.maxTokens,
    temperature: opt.temperature,
    k: opt.topK,
    p: opt.topP,
    frequency_penalty: opt.frequencyPenalty,
    presence_penalty: opt.presencePenalty,
    end_sequences: stopSequences,
    stop_sequences: opt.stopSequences,
    return_likelihoods: opt.returnLikelihoods,
});
/**
 * Cohere: AI Service
 * @export
 */
class Cohere {
    constructor(apiKey, options = (0, exports.CohereDefaultOptions)()) {
        if (apiKey === '') {
            throw new Error('Cohere API key not set');
        }
        this.apiKey = apiKey;
        this.options = options;
    }
    name() {
        return 'Cohere';
    }
    generate(prompt, md, sessionID) {
        prompt = prompt.trim();
        const res = (0, util_1.apiCall)({
            key: this.apiKey,
            name: "generate" /* apiTypes.Generate */,
            url: apiURL,
            headers: { 'Cohere-Version': '2022-12-06' },
        }, generateReq(prompt, this.options, md === null || md === void 0 ? void 0 : md.stopSequences));
        return res.then(({ id, generations: gens }) => ({
            id: id,
            sessionID: sessionID,
            query: prompt,
            values: gens,
            value() {
                return this.values[0].text;
            },
        }));
    }
    embed(texts, sessionID) {
        if (texts.length > 96) {
            throw new Error('Cohere limits embeddings input to 96 strings');
        }
        const overLimit = texts.filter((v) => v.length > 512);
        if (overLimit.length !== 0) {
            throw new Error('Cohere limits embeddings input to 512 characters');
        }
        const res = (0, util_1.apiCall)({
            key: this.apiKey,
            name: "embed" /* apiTypes.Embed */,
            url: apiURL,
            headers: { 'Cohere-Version': '2022-12-06' },
        }, { texts, model: this.options.model, truncate: 'NONE' });
        return res.then(({ id, embeddings }) => ({
            id: id,
            sessionID,
            texts,
            model: this.options.model,
            embeddings,
        }));
    }
}
exports.Cohere = Cohere;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29oZXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FpL2NvaGVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQSxpQ0FBc0M7QUFNdEMsTUFBTSxNQUFNLEdBQUcsd0JBQXdCLENBQUM7QUFPeEM7OztHQUdHO0FBQ0gsSUFBWSxtQkFJWDtBQUpELFdBQVksbUJBQW1CO0lBQzdCLHNFQUErQyxDQUFBO0lBQy9DLHdDQUFpQixDQUFBO0lBQ2pCLHdDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFKVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQUk5QjtBQUVEOzs7R0FHRztBQUNILElBQVksdUJBSVg7QUFKRCxXQUFZLHVCQUF1QjtJQUNqQyxvREFBeUIsQ0FBQTtJQUN6QixzQ0FBVyxDQUFBO0lBQ1gsd0NBQWEsQ0FBQTtBQUNmLENBQUMsRUFKVyx1QkFBdUIsR0FBdkIsK0JBQXVCLEtBQXZCLCtCQUF1QixRQUlsQztBQWtCRDs7O0dBR0c7QUFDSSxNQUFNLG9CQUFvQixHQUFHLEdBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxvQkFBb0I7SUFDL0MsU0FBUyxFQUFFLEdBQUc7SUFDZCxXQUFXLEVBQUUsSUFBSTtJQUNqQixJQUFJLEVBQUUsQ0FBQztJQUNQLElBQUksRUFBRSxDQUFDO0lBQ1AsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQixlQUFlLEVBQUUsQ0FBQztDQUNuQixDQUFDLENBQUM7QUFSVSxRQUFBLG9CQUFvQix3QkFROUI7QUFFSDs7O0dBR0c7QUFDSSxNQUFNLHFCQUFxQixHQUFHLEdBQWtCLEVBQUUsQ0FBQyxpQ0FDckQsSUFBQSw0QkFBb0IsR0FBRSxLQUN6QixXQUFXLEVBQUUsR0FBRyxJQUNoQixDQUFDO0FBSFUsUUFBQSxxQkFBcUIseUJBRy9CO0FBbUNILE1BQU0sV0FBVyxHQUFHLENBQ2xCLE1BQWMsRUFDZCxHQUE0QixFQUM1Qixh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