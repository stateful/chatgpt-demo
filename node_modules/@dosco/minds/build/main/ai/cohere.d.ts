import { AIService, AIGenerateResponse, EmbedResponse, PromptMetadata } from '../text';
/**
 * Cohere: Models for text generation
 * @export
 */
export declare enum CohereGenerateModel {
    CommandXLargeNightly = "command-xlarge-nightly",
    XLarge = "xlarge",
    Medium = "medium"
}
/**
 * Cohere: Specify how and if the token likelihoods are returned with the response.
 * @export
 */
export declare enum CohereReturnLikelihoods {
    GENERATION = "GENERATION",
    ALL = "ALL",
    NONE = "NONE"
}
/**
 * Cohere: Model options for text generation
 * @export
 */
export type CohereOptions = {
    model: CohereGenerateModel | string;
    maxTokens: number;
    temperature: number;
    topK: number;
    topP: number;
    frequencyPenalty?: number;
    presencePenalty?: number;
    stopSequences?: string[];
    returnLikelihoods?: CohereReturnLikelihoods;
};
/**
 * Cohere: Default Model options for text generation
 * @export
 */
export declare const CohereDefaultOptions: () => CohereOptions;
/**
 * Cohere: Default model options for more creative text generation
 * @export
 */
export declare const CohereCreativeOptions: () => CohereOptions;
/**
 * Cohere: AI Service
 * @export
 */
export declare class Cohere implements AIService {
    private apiKey;
    private options;
    constructor(apiKey: string, options?: Readonly<CohereOptions>);
    name(): string;
    generate(prompt: string, md?: PromptMetadata, sessionID?: string): Promise<AIGenerateResponse>;
    embed(texts: string[], sessionID?: string): Promise<EmbedResponse>;
}
