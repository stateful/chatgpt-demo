"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlephAlpha = exports.AlephAlphaCreativeOptions = exports.AlephAlphaDefaultOptions = exports.AlephaAlphaGenerateHosting = exports.AlephAlphaEmbedRepresentation = exports.AlephAlphaGenerateModel = void 0;
const util_1 = require("./util");
const apiURL = 'https://api.aleph-alpha.com/';
/**
 * AlephAlpha: Models for text generation
 * @export
 */
var AlephAlphaGenerateModel;
(function (AlephAlphaGenerateModel) {
    AlephAlphaGenerateModel["LuminousSupremeControl"] = "luminous-supreme-control";
    AlephAlphaGenerateModel["LuminousSupreme"] = "luminous-supreme";
    AlephAlphaGenerateModel["LuminousExtended"] = "luminous-extended";
    AlephAlphaGenerateModel["LuminousBase"] = "luminous-base";
})(AlephAlphaGenerateModel = exports.AlephAlphaGenerateModel || (exports.AlephAlphaGenerateModel = {}));
var AlephAlphaEmbedRepresentation;
(function (AlephAlphaEmbedRepresentation) {
    AlephAlphaEmbedRepresentation["Symmetric"] = "symmetric";
    AlephAlphaEmbedRepresentation["Document"] = "document";
    AlephAlphaEmbedRepresentation["Query"] = "query";
})(AlephAlphaEmbedRepresentation = exports.AlephAlphaEmbedRepresentation || (exports.AlephAlphaEmbedRepresentation = {}));
var AlephaAlphaGenerateHosting;
(function (AlephaAlphaGenerateHosting) {
    AlephaAlphaGenerateHosting["MaxPrivacy"] = "aleph-alpha";
})(AlephaAlphaGenerateHosting = exports.AlephaAlphaGenerateHosting || (exports.AlephaAlphaGenerateHosting = {}));
/**
 * AlephAlpha: Default Model options for text generation
 * @export
 */
const AlephAlphaDefaultOptions = () => ({
    model: AlephAlphaGenerateModel.LuminousSupreme,
    representation: AlephAlphaEmbedRepresentation.Document,
    disableOptimizations: true,
    maxTokens: 300,
    temperature: 0.45,
    topK: 0,
    topP: 1,
    //frequencyPenalty: 0.40
    // presencePenalty: 0.40
});
exports.AlephAlphaDefaultOptions = AlephAlphaDefaultOptions;
/**
 * AlephAlpha: Default model options for more creative text generation
 * @export
 */
const AlephAlphaCreativeOptions = () => (Object.assign(Object.assign({}, (0, exports.AlephAlphaDefaultOptions)()), { model: AlephAlphaGenerateModel.LuminousSupreme, temperature: 0.9 }));
exports.AlephAlphaCreativeOptions = AlephAlphaCreativeOptions;
const generateReq = (prompt, opt, stopSequences) => ({
    model: opt.model,
    hosting: opt.hosting,
    prompt: prompt,
    maximum_tokens: opt.maxTokens,
    minimum_tokens: opt.minTokens,
    echo: opt.echo,
    temperature: opt.temperature,
    top_k: opt.topK,
    top_p: opt.topP,
    presence_penalty: opt.presencePenalty,
    frequency_penalty: opt.frequencyPenalty,
    sequence_penalty: opt.sequencePenalty,
    sequence_penalty_min_length: opt.sequencePenaltyMinLength,
    repetition_penalties_include_completion: opt.repetitionPenaltiesIncludeCompletion,
    use_multiplicative_presence_penalty: opt.useMultiplicativePresencePenalty,
    useMultiplicativeFrequencyPenalty: opt.useMultiplicativeFrequencyPenalty,
    useMultiplicativeSequencePenalty: opt.useMultiplicativeSequencePenalty,
    penalty_bias: opt.penaltyBias,
    penalty_exceptions: opt.penaltyExceptions,
    penalty_exceptions_include_stop_sequences: opt.penaltyExceptionsIncludeStopSequences,
    best_of: opt.bestOf,
    n: opt.n,
    logit_bias: opt.logitBias,
    log_probs: opt.logProbs,
    stop_sequences: stopSequences,
    tokens: opt.tokens,
    raw_completion: opt.rawCompletion,
    disable_optimizations: opt.disableOptimizations,
    completion_bias_inclusion: opt.completionBiasInclusion,
    completion_bias_inclusion_first_token_only: opt.completionBiasInclusionFirstTokenOnly,
    completion_bias_exclusion: opt.completionBiasExclusion,
    completion_bias_exclusion_first_token_only: opt.completionBiasExclusionFirstTokenOnly,
    contextual_control_threshold: opt.contextualControlThreshold,
    control_log_additive: opt.controlLogAdditive,
});
const embedReq = (prompt, opt) => ({
    model: opt.model,
    hosting: opt.hosting,
    prompt: prompt,
    representation: opt.representation,
    compress_to_size: opt.compressToSize,
    normalize: opt.normalize,
    contextual_control_threshold: opt.contextualControlThreshold,
    control_log_additive: opt.controlLogAdditive,
});
/**
 * AlephAlpha: AI Service
 * @export
 */
class AlephAlpha {
    constructor(apiKey, options = (0, exports.AlephAlphaDefaultOptions)()) {
        if (apiKey === '') {
            throw new Error('AlephAlpha API key not set');
        }
        this.apiKey = apiKey;
        this.options = options;
    }
    name() {
        return 'AlephAlpha';
    }
    generate(prompt, md, sessionID) {
        const text = prompt.trim();
        const res = (0, util_1.apiCall)({
            key: this.apiKey,
            name: "complete" /* apiTypes.Generate */,
            url: apiURL,
        }, generateReq(text, this.options, md === null || md === void 0 ? void 0 : md.stopSequences));
        return res.then(({ completions }) => ({
            id: '',
            sessionID: sessionID,
            query: prompt,
            values: completions.map((v) => ({ id: '', text: v.completion.trim() })),
            value() {
                return this.values[0].text;
            },
        }));
    }
    embed(texts, sessionID) {
        if (texts.length > 1) {
            throw new Error('AlephAlpha limits embeddings input to 1 string');
        }
        const overLimit = texts.filter((v) => v.length > 512);
        if (overLimit.length !== 0) {
            throw new Error('AlephAlpha limits embeddings input to 512 characters');
        }
        const res = (0, util_1.apiCall)({
            key: this.apiKey,
            name: "semantic_embed" /* apiTypes.Embed */,
            url: apiURL,
        }, embedReq(texts[0], this.options));
        return res.then(({ model_version, embedding }) => ({
            id: '',
            sessionID,
            texts,
            model: model_version,
            embeddings: embedding,
        }));
    }
}
exports.AlephAlpha = AlephAlpha;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcGhhbHBoYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9haS9hbGVwaGFscGhhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU9BLGlDQUFzQztBQUV0QyxNQUFNLE1BQU0sR0FBRyw4QkFBOEIsQ0FBQztBQU85Qzs7O0dBR0c7QUFDSCxJQUFZLHVCQUtYO0FBTEQsV0FBWSx1QkFBdUI7SUFDakMsOEVBQW1ELENBQUE7SUFDbkQsK0RBQW9DLENBQUE7SUFDcEMsaUVBQXNDLENBQUE7SUFDdEMseURBQThCLENBQUE7QUFDaEMsQ0FBQyxFQUxXLHVCQUF1QixHQUF2QiwrQkFBdUIsS0FBdkIsK0JBQXVCLFFBS2xDO0FBRUQsSUFBWSw2QkFJWDtBQUpELFdBQVksNkJBQTZCO0lBQ3ZDLHdEQUF1QixDQUFBO0lBQ3ZCLHNEQUFxQixDQUFBO0lBQ3JCLGdEQUFlLENBQUE7QUFDakIsQ0FBQyxFQUpXLDZCQUE2QixHQUE3QixxQ0FBNkIsS0FBN0IscUNBQTZCLFFBSXhDO0FBRUQsSUFBWSwwQkFFWDtBQUZELFdBQVksMEJBQTBCO0lBQ3BDLHdEQUEwQixDQUFBO0FBQzVCLENBQUMsRUFGVywwQkFBMEIsR0FBMUIsa0NBQTBCLEtBQTFCLGtDQUEwQixRQUVyQztBQTRDRDs7O0dBR0c7QUFDSSxNQUFNLHdCQUF3QixHQUFHLEdBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxlQUFlO0lBQzlDLGNBQWMsRUFBRSw2QkFBNkIsQ0FBQyxRQUFRO0lBQ3RELG9CQUFvQixFQUFFLElBQUk7SUFDMUIsU0FBUyxFQUFFLEdBQUc7SUFDZCxXQUFXLEVBQUUsSUFBSTtJQUNqQixJQUFJLEVBQUUsQ0FBQztJQUNQLElBQUksRUFBRSxDQUFDO0lBQ1Asd0JBQXdCO0lBQ3hCLHdCQUF3QjtDQUN6QixDQUFDLENBQUM7QUFWVSxRQUFBLHdCQUF3Qiw0QkFVbEM7QUFFSDs7O0dBR0c7QUFDSSxNQUFNLHlCQUF5QixHQUFHLEdBQXNCLEVBQUUsQ0FBQyxpQ0FDN0QsSUFBQSxnQ0FBd0IsR0FBRSxLQUM3QixLQUFLLEVBQUUsdUJBQXVCLENBQUMsZUFBZSxFQUM5QyxXQUFXLEVBQUUsR0FBRyxJQUNoQixDQUFDO0FBSlUsUUFBQSx5QkFBeUIsNkJBSW5DO0FBcUVILE1BQU0sV0FBVyxHQUFHLENBQ2xCLE1BQWMsRUFDZCxHQUFnQyxFQUNoQyxhQUF1QixFQUNJLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztJQUNoQixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87SUFDcEIsTUFBTSxFQUFFLE1BQU07SUFDZCxjQUFjLEVBQUUsR0FBRyxDQUFDLFNBQVM7SUFDN0IsY0FBYyxFQUFFLEdBQUcsQ0FBQyxTQUFTO0lBQzdCLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtJQUNkLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVztJQUM1QixLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUk7SUFDZixLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUk7SUFDZixnQkFBZ0IsRUFBRSxHQUFHLENBQUMsZUFBZTtJQUNyQyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsZ0JBQWdCO0lBQ3ZDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxlQUFlO0lBQ3JDLDJCQUEyQixFQUFFLEdBQUcsQ0FBQyx3QkFBd0I7SUFDekQsdUNBQXVDLEVBQ3JDLEdBQUcsQ0FBQyxvQ0FBb0M7SUFDMUMsbUNBQW1DLEVBQUUsR0FBRyxDQUFDLGdDQUFnQztJQUN6RSxpQ0FBaUMsRUFBRSxHQUFHLENBQUMsaUNBQWlDO0lBQ3hFLGdDQUFnQyxFQUFFLEdBQUcsQ0FBQyxnQ0FBZ0M7SUFDdEUsWUFBWSxFQUFFLEdBQUcsQ0FBQyxXQUFXO0lBQzdCLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxpQkFBaUI7SUFDekMseUNBQXlDLEVBQ3ZDLEdBQUcsQ0FBQyxxQ0FBcUM7SUFDM0MsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNO0lBQ25CLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNSLFVBQVUsRUFBRSxHQUFHLENBQUMsU0FBUztJQUN6QixTQUFTLEVBQUUsR0FBRyxDQUFDLFFBQVE7SUFDdkIsY0FBYyxFQUFFLGFBQWE7SUFDN0IsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO0lBQ2xCLGNBQWMsRUFBRSxHQUFHLENBQUMsYUFBYTtJQUNqQyxxQkFBcUIsRUFBRSxHQUFHLENBQUMsb0JBQW9CO0lBQy9DLHlCQUF5QixFQUFFLEdBQUcsQ0FBQyx1QkFBdUI7SUFDdEQsMENBQTBDLEVBQ3hDLEdBQUcsQ0FBQyxxQ0FBcUM7SUFDM0MseUJBQXlCLEVBQUUsR0FBRyxDQUFDLHVCQUF1QjtJQUN0RCwwQ0FBMEMsRUFDeEMsR0FBRyxDQUFDLHFDQUFxQztJQUMzQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsMEJBQTBCO0lBQzVELG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxrQkFBa0I7Q0FDN0MsQ0FBQyxDQUFDO0FBRUgsTUFBTSxRQUFRLEdBQUcsQ0FDZixNQUFjLEVBQ2QsR0FBZ0MsRUFDUixFQUFFLENBQUMsQ0FBQztJQUM1QixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7SUFDaEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO0lBQ3BCLE1BQU0sRUFBRSxNQUFNO0lBQ2QsY0FBYyxFQUFFLEdBQUcsQ0FBQyxjQUFjO0lBQ2xDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxjQUFjO0lBQ3BDLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUztJQUN4Qiw0QkFBNEIsRUFBRSxHQUFHLENBQUMsMEJBQTBCO0lBQzVELG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxrQkFBa0I7Q0FDN0MsQ0FBQyxDQUFDO0FBRUg7OztHQUdHO0FBQ0gsTUFBYSxVQUFVO0lBSXJCLFlBQ0UsTUFBYyxFQUNkLFVBQXVDLElBQUEsZ0NBQXdCLEdBQUU7UUFFakUsSUFBSSxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJO1FBQ0YsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELFFBQVEsQ0FDTixNQUFjLEVBQ2QsRUFBbUIsRUFDbkIsU0FBa0I7UUFFbEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTNCLE1BQU0sR0FBRyxHQUFHLElBQUEsY0FBTyxFQUtqQjtZQUNFLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNoQixJQUFJLG9DQUFtQjtZQUN2QixHQUFHLEVBQUUsTUFBTTtTQUNaLEVBQ0QsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsYUFBRixFQUFFLHVCQUFGLEVBQUUsQ0FBRSxhQUFhLENBQUMsQ0FDbkQsQ0FBQztRQUVGLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDcEMsRUFBRSxFQUFFLEVBQUU7WUFDTixTQUFTLEVBQUUsU0FBUztZQUNwQixLQUFLLEVBQUUsTUFBTTtZQUNiLE1BQU0sRUFBRSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkUsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzdCLENBQUM7U0FDRixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBZSxFQUFFLFNBQWtCO1FBQ3ZDLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN0RCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztTQUN6RTtRQUVELE1BQU0sR0FBRyxHQUFHLElBQUEsY0FBTyxFQUNqQjtZQUNFLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNoQixJQUFJLHVDQUFnQjtZQUNwQixHQUFHLEVBQUUsTUFBTTtTQUNaLEVBQ0QsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQ2pDLENBQUM7UUFFRixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqRCxFQUFFLEVBQUUsRUFBRTtZQUNOLFNBQVM7WUFDVCxLQUFLO1lBQ0wsS0FBSyxFQUFFLGFBQWE7WUFDcEIsVUFBVSxFQUFFLFNBQVM7U0FDdEIsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0NBQ0Y7QUE3RUQsZ0NBNkVDIn0=