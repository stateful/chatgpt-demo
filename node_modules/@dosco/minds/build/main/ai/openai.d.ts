import { AIService, AIGenerateResponse, EmbedResponse, AudioResponse, PromptMetadata } from '../text';
/**
 * OpenAI: Models for text generation
 * @export
 */
export declare enum OpenAIGenerateModel {
    GPT4 = "gpt-4",
    GPT432K = "gpt-4-32k",
    GPT3Turbo = "gpt-3.5-turbo",
    GPT3TextDavinci003 = "text-davinci-003"
}
/**
 * OpenAI: Models for code generation
 * @export
 */
export declare enum OpenAIGenerateCodeModel {
    CodexCodeDavinci002 = "code-davinci-002",
    CodexCodeCushman001 = "code-cushman-001",
    CodexCodeDavinci001 = "code-davinci-001"
}
/**
 * OpenAI: Models for use in embeddings
 * @export
 */
export declare enum OpenAIEmbedModels {
    GPT3TextEmbeddingAda002 = "text-embedding-ada-002",
    GPT3TextSimilarityDavinci001 = "text-similarity-davinci-001"
}
/**
 * OpenAI: Models for for audio transcription
 * @export
 */
export declare enum OpenAIAudioModel {
    Whisper1 = "whisper-1"
}
/**
 * OpenAI: Model options for text generation
 * @export
 */
export type OpenAIOptions = {
    model: OpenAIGenerateModel;
    embedModel: OpenAIEmbedModels;
    audioModel: OpenAIAudioModel;
    suffix: string | null;
    maxTokens: number;
    temperature: number;
    topP: number;
    n?: number;
    stream?: boolean;
    logprobs?: number;
    echo?: boolean;
    presencePenalty?: number;
    frequencyPenalty?: number;
    bestOf?: number;
    logitBias?: Map<string, number>;
    user?: string;
};
/**
 * OpenAI: Default Model options for text generation
 * @export
 */
export declare const OpenAIDefaultOptions: () => OpenAIOptions;
/**
 * OpenAI: Default model options for more creative text generation
 * @export
 */
export declare const OpenAICreativeOptions: () => OpenAIOptions;
/**
 * OpenAI: Default model options for more fast text generation
 * @export
 */
export declare const OpenAIFastOptions: () => OpenAIOptions;
/**
 * OpenAI: AI Service
 * @export
 */
export declare class OpenAI implements AIService {
    private apiKey;
    private orgID?;
    private options;
    constructor(apiKey: string, options?: Readonly<OpenAIOptions>);
    name(): string;
    generate(prompt: string, md?: PromptMetadata, sessionID?: string): Promise<AIGenerateResponse>;
    private generateDefault;
    private generateChat;
    embed(texts: string[], sessionID?: string): Promise<EmbedResponse>;
    transcribe(file: string, prompt?: string, language?: string, sessionID?: string): Promise<AudioResponse>;
    private createAPI;
}
