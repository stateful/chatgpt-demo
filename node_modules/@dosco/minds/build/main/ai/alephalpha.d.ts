import { AIService, AIGenerateResponse, EmbedResponse, PromptMetadata } from '../text';
/**
 * AlephAlpha: Models for text generation
 * @export
 */
export declare enum AlephAlphaGenerateModel {
    LuminousSupremeControl = "luminous-supreme-control",
    LuminousSupreme = "luminous-supreme",
    LuminousExtended = "luminous-extended",
    LuminousBase = "luminous-base"
}
export declare enum AlephAlphaEmbedRepresentation {
    Symmetric = "symmetric",
    Document = "document",
    Query = "query"
}
export declare enum AlephaAlphaGenerateHosting {
    MaxPrivacy = "aleph-alpha"
}
/**
 * AlephAlpha: Model options for text generation
 * @export
 */
export type AlephAlphaOptions = {
    model: AlephAlphaGenerateModel | string;
    hosting?: AlephaAlphaGenerateHosting;
    maxTokens: number;
    minTokens?: number;
    echo?: boolean;
    temperature: number;
    topK: number;
    topP: number;
    presencePenalty?: number;
    frequencyPenalty?: number;
    sequencePenalty?: number;
    sequencePenaltyMinLength?: number;
    repetitionPenaltiesIncludeCompletion?: number;
    useMultiplicativePresencePenalty?: boolean;
    useMultiplicativeFrequencyPenalty?: boolean;
    useMultiplicativeSequencePenalty?: boolean;
    penaltyBias?: string;
    penaltyExceptions?: string[];
    penaltyExceptionsIncludeStopSequences?: boolean;
    bestOf?: number;
    n?: number;
    logitBias?: Map<string, number>;
    logProbs?: number;
    tokens?: boolean;
    rawCompletion?: boolean;
    disableOptimizations?: boolean;
    completionBiasInclusion?: string[];
    completionBiasInclusionFirstTokenOnly?: boolean;
    completionBiasExclusion?: boolean;
    completionBiasExclusionFirstTokenOnly?: boolean;
    contextualControlThreshold?: number;
    controlLogAdditive?: boolean;
    representation: AlephAlphaEmbedRepresentation;
    compressToSize?: number;
    normalize?: boolean;
};
/**
 * AlephAlpha: Default Model options for text generation
 * @export
 */
export declare const AlephAlphaDefaultOptions: () => AlephAlphaOptions;
/**
 * AlephAlpha: Default model options for more creative text generation
 * @export
 */
export declare const AlephAlphaCreativeOptions: () => AlephAlphaOptions;
/**
 * AlephAlpha: AI Service
 * @export
 */
export declare class AlephAlpha implements AIService {
    private apiKey;
    private options;
    constructor(apiKey: string, options?: Readonly<AlephAlphaOptions>);
    name(): string;
    generate(prompt: string, md?: PromptMetadata, sessionID?: string): Promise<AIGenerateResponse>;
    embed(texts: string[], sessionID?: string): Promise<EmbedResponse>;
}
