"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateText = void 0;
const memory_1 = require("./memory");
const util_1 = require("./util");
/**
 * The main class for various text generation tasks
 * @export
 */
class GenerateText {
    constructor(ai, mem = new memory_1.Memory()) {
        this.maxSteps = 20;
        this.debug = false;
        this.ai = ai;
        this.mem = mem;
    }
    setMaxSteps(n) {
        this.maxSteps = n;
    }
    setDebug(b) {
        this.debug = b;
    }
    generate(query, prompt, sessionID) {
        return new Promise((resolve) => {
            const res = this._generate(query, prompt, sessionID);
            resolve(res);
        });
    }
    async _generate(query, prompt, sessionID) {
        const q = query.trim();
        const md = prompt.metadata();
        const h = () => this.mem.history(sessionID);
        if (q === '') {
            throw new Error('not query found');
        }
        for (let i = 0; i < this.maxSteps; i++) {
            const p = prompt.create(query, h, this.ai);
            if (this.debug) {
                (0, util_1.log)(`> ${p}`, 'white');
            }
            const res = await this.ai.generate(p, md, sessionID);
            let done = false;
            if (this.debug) {
                (0, util_1.log)(`< ${res.values[0].text.trim()}`, 'red');
            }
            if (md.actions) {
                done = await this.processAction(res, prompt, sessionID);
            }
            else {
                done = await this.processSeq(q, res, prompt, sessionID);
            }
            if (res.values.length === 0) {
                throw new Error('empty response from ai');
            }
            if (!done) {
                continue;
            }
            const { keyValueResponse: kvRes } = md;
            const value = kvRes ? () => stringToMap(res.value()) : res.value;
            return Object.assign(Object.assign({}, res), { value });
        }
        throw new Error(`query uses over max number of steps: ${this.maxSteps}`);
    }
    processSeq(query, res, prompt, sessionID) {
        const md = prompt.metadata();
        const val = res.values[0].text.trim();
        const mval = [md === null || md === void 0 ? void 0 : md.queryPrefix, query, md === null || md === void 0 ? void 0 : md.responsePrefix, val];
        this.mem.add(mval.join(''), sessionID);
        return true;
    }
    async processAction(res, prompt, sessionID) {
        const _a = prompt.metadata(), { actions } = _a, md = __rest(_a, ["actions"]);
        if (!md.actionName) {
            throw new Error('actionName parameter not set');
        }
        if (!md.actionValue) {
            throw new Error('actionValue parameter not set');
        }
        if (!md.finalValue) {
            throw new Error('finalValue parameter not set');
        }
        let actKey;
        let actVal;
        let v;
        const val = res.values[0].text.trim();
        if ((v = md.finalValue.exec(val)) !== null) {
            const mval = [md === null || md === void 0 ? void 0 : md.responsePrefix, val];
            this.mem.add(mval.join(''), sessionID);
            res.values[0].text = v[1].trim();
            return true;
        }
        if ((v = md.actionName.exec(val)) !== null) {
            actKey = v[1].trim();
        }
        if ((v = md.actionValue.exec(val)) !== null) {
            actVal = v[1].trim();
        }
        const act = actions.find((v) => v.name === actKey);
        if (!act) {
            throw new Error(`invalid action found: ${actKey}`);
        }
        const actRes = act.action.length === 2
            ? act.action(actVal, await this.ai.embed([actVal], sessionID))
            : act.action(actVal);
        if (this.debug) {
            (0, util_1.log)(`> ${actKey}(${actVal}): ${actRes}`, 'cyan');
        }
        const mval = [md === null || md === void 0 ? void 0 : md.responsePrefix, val, md === null || md === void 0 ? void 0 : md.queryPrefix, actRes];
        this.mem.add(mval.join(''), sessionID);
        return false;
    }
}
exports.GenerateText = GenerateText;
const stringToMap = (text) => {
    const vm = new Map();
    const re = /([a-zA-Z ]+):\s{0,}\n?(((?!N\/A).)+)$/gm;
    let m;
    while ((m = re.exec(text)) !== null) {
        // This is necessary to avoid infinite loops with zero-width matches
        if (m.index === re.lastIndex) {
            re.lastIndex++;
        }
        vm.set(m[1], m[2].split(','));
    }
    return vm;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGV4dC9nZW5lcmF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQU9BLHFDQUFrQztBQUNsQyxpQ0FBNkI7QUFFN0I7OztHQUdHO0FBRUgsTUFBYSxZQUFZO0lBTXZCLFlBQVksRUFBYSxFQUFFLE1BQWdCLElBQUksZUFBTSxFQUFFO1FBSC9DLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBR3BCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUVELFdBQVcsQ0FBQyxDQUFTO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxRQUFRLENBQUMsQ0FBVTtRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQsUUFBUSxDQUNOLEtBQWEsRUFDYixNQUFnQixFQUNoQixTQUFrQjtRQUVsQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ3JELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLEtBQUssQ0FBQyxTQUFTLENBQ3JCLEtBQWEsRUFDYixNQUFnQixFQUNoQixTQUFrQjtRQUVsQixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFD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